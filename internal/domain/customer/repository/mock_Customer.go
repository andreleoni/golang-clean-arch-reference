// Code generated by mockery v2.15.0. DO NOT EDIT.

package repository

import (
	entity "golang-clean-arch-reference/internal/domain/customer/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockCustomerRepository is an autogenerated mock type for the Customer type
type MockCustomerRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *MockCustomerRepository) Create(_a0 *entity.Customer) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Customer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *MockCustomerRepository) Delete(_a0 *entity.Customer) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Customer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ID
func (_m *MockCustomerRepository) Find(ID string) (*entity.Customer, error) {
	ret := _m.Called(ID)

	var r0 *entity.Customer
	if rf, ok := ret.Get(0).(func(string) *entity.Customer); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *MockCustomerRepository) Update(_a0 *entity.Customer) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Customer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockCustomerRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCustomerRepository creates a new instance of MockCustomerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCustomerRepository(t mockConstructorTestingTNewMockCustomerRepository) *MockCustomerRepository {
	mock := &MockCustomerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
